/**
 * Next Identity Widget - Minified Version
 */
class NIWidget{constructor(e){this.config=e,this.state={},this.debug=e.debug||!1,this.discoveredConfig=null,this.log("Widget initialized with config:",e),this.initialize()}log(...e){this.debug&&console.log("[NI Widget]",...e)}async initialize(){try{await this.fetchOIDCConfig(),this.initializeState(),this.setupEventListeners()}catch(e){console.error("Widget initialization failed:",e),this.log("Widget initialization failed:",e.message);const t=new CustomEvent("ni:error",{detail:{error:"initialization_failed",errorDescription:e.message}});document.dispatchEvent(t);const i=document.querySelector(".ni-error");i&&(i.textContent=`Initialization failed: ${e.message}`,i.classList.add("active"))}}async fetchOIDCConfig(){if(!this.config.issuerUrl)throw new Error("Issuer URL is required but not provided in configuration");this.log("Fetching OIDC configuration from discovery endpoint");const e=`${this.config.issuerUrl}/.well-known/openid-configuration`;this.log("Discovery URL:",e);try{const t=await fetch(e);if(!t.ok)throw new Error(`Failed to fetch OIDC configuration: ${t.status} ${t.statusText}`);if(this.discoveredConfig=await t.json(),this.log("OIDC configuration fetched successfully:",this.discoveredConfig),!this.discoveredConfig.authorization_endpoint)throw new Error("Authorization endpoint not found in OIDC configuration");if(!this.discoveredConfig.token_endpoint)throw new Error("Token endpoint not found in OIDC configuration");return this.discoveredConfig}catch(e){throw console.error("Failed to fetch OIDC configuration:",e),new Error(`Failed to fetch OIDC configuration: ${e.message}`)}}initializeState(){const e=new URLSearchParams(window.location.search),t=e.get("code"),i=e.get("state");this.log("Initializing state. Code present:",!!t,"State present:",!!i),t&&i?this.handleCallback(t,i):this.clearStoredTokenData()}setupEventListeners(){this.log("Setting up event listeners"),document.addEventListener("DOMContentLoaded",()=>{this.attachButtonListeners()}),("complete"===document.readyState||"interactive"===document.readyState)&&(this.log("DOM already loaded, attaching listeners immediately"),this.attachButtonListeners()),document.addEventListener("click",e=>{const t=e.target.closest(".ni-auth-button");t&&(e.preventDefault(),this.log("Auth button clicked via delegation for provider:",t.getAttribute("data-provider-id")),this.initiateLogin(t.getAttribute("data-provider-id")))})}attachButtonListeners(){const e=document.querySelectorAll(".ni-auth-button");this.log("Found",e.length,"auth buttons to attach listeners to"),e.forEach(e=>{e.addEventListener("click",t=>{t.preventDefault();const i=e.getAttribute("data-provider-id");this.log("Auth button clicked directly for provider:",i),this.initiateLogin(i)}),e.setAttribute("data-listener-attached","true"),this.log("Attached listener to button:",e.getAttribute("data-provider-id"))}),this.applyCustomizations()}generateRandomString(e=64){this.log("Generating random string of length:",e);const t="ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789-._~";let i="";const n=new Uint8Array(e);for(let s=0;s<e;s++)crypto.getRandomValues(n),i+=t[n[s]%t.length];return this.log("Generated random string (first 10 chars):",i.substring(0,10)+"..."),i}async calculateCodeChallenge(e){this.log("Calculating code challenge from verifier");const t=new TextEncoder,i=t.encode(e),n=await crypto.subtle.digest("SHA-256",i),s=btoa(String.fromCharCode(...new Uint8Array(n))).replace(/\+/g,"-").replace(/\//g,"_").replace(/=+$/,"");return this.log("Code challenge calculated (first 10 chars):",s.substring(0,10)+"..."),s}storeAuthState(e,t,i){this.log("Storing auth state for provider:",i);const n={state:e,codeVerifier:t,providerId:i,timestamp:Date.now()};localStorage.setItem("ni_auth_state",JSON.stringify(n)),this.log("Auth state stored successfully")}getStoredAuthState(){this.log("Retrieving stored auth state");const e=localStorage.getItem("ni_auth_state");if(!e)return this.log("No stored auth state found"),null;try{const t=JSON.parse(e);return this.log("Retrieved auth state for provider:",t.providerId),t}catch(e){return console.error("Failed to parse auth state:",e),null}}clearStoredAuthState(){this.log("Clearing stored auth state"),localStorage.removeItem("ni_auth_state")}storeTokenData(e){this.log("Storing token data for provider:",e.providerId),localStorage.setItem("ni_token_data",JSON.stringify(e));const t=new CustomEvent("ni:tokens_received",{detail:e});this.log("Dispatching tokens_received event"),document.dispatchEvent(t)}getStoredTokenData(){this.log("Retrieving stored token data");const e=localStorage.getItem("ni_token_data");if(!e)return this.log("No stored token data found"),null;try{const t=JSON.parse(e);return this.log("Retrieved token data for provider:",t.providerId),t}catch(e){return console.error("Failed to parse token data:",e),null}}clearStoredTokenData(){this.log("Clearing stored token data"),localStorage.removeItem("ni_token_data")}parseIdToken(e){this.log("Parsing ID token");try{const t=e.split(".");if(3!==t.length)throw new Error("Invalid token format");const i=JSON.parse(atob(t[1]));return this.log("ID token parsed successfully"),i}catch(e){throw console.error("Failed to parse ID token:",e),new Error("Invalid ID token format")}}async initiateLogin(e){try{if(this.log("Initiating login for provider:",e),!this.discoveredConfig&&(this.log("OIDC configuration not available, fetching now..."),await this.fetchOIDCConfig()),!e)throw new Error("Provider ID is required but was not provided");const t=this.config.providers.find(t=>t.id===e);if(!t)throw new Error(`Provider with ID ${e} not found in configuration`);if(this.log("Found provider configuration:",t.name),!t.clientId)throw new Error(`Client ID is missing for provider: ${t.name}`);const i=this.generateRandomString(32),n=this.generateRandomString(64);let s;try{s=await this.calculateCodeChallenge(n)}catch(e){throw new Error(`Failed to calculate code challenge: ${e.message}`)}this.storeAuthState(i,n,e);try{const n=new URL(this.discoveredConfig.authorization_endpoint);n.searchParams.append("client_id",t.clientId),n.searchParams.append("response_type","code"),n.searchParams.append("redirect_uri",this.config.redirectUri),n.searchParams.append("scope",this.config.scope),n.searchParams.append("state",i),n.searchParams.append("code_challenge",s),n.searchParams.append("code_challenge_method",this.config.pkce.challengeMethod),this.log("Auth URL created:",n.toString());const o=new CustomEvent("ni:login_initiated",{detail:{providerId:e}});this.log("Dispatching login_initiated event"),document.dispatchEvent(o);const a=document.querySelector(".ni-loading");a&&(this.log("Showing loading indicator"),a.classList.add("active")),this.log("Redirecting to authorization endpoint"),console.log("REDIRECT URL:",n.toString()),window.location.href=n.toString()}catch(e){throw new Error(`Failed to construct authorization URL: ${e.message}`)}}catch(e){console.error("Login initiation failed:",e),this.log("Login initiation failed with error:",e.message);const t=document.querySelector(".ni-error");if(t){t.textContent=e.message,t.classList.add("active");const i=document.querySelector(".ni-loading");i&&i.classList.remove("active")}const i=new CustomEvent("ni:error",{detail:{error:"login_failed",errorDescription:e.message}});document.dispatchEvent(i)}}async handleCallback(e,t){try{if(this.log("Handling auth callback. Code present, state:",t),!this.discoveredConfig&&(this.log("OIDC configuration not available, fetching now..."),await this.fetchOIDCConfig()),!this.getStoredAuthState())throw new Error("No stored authentication state found");const i=this.getStoredAuthState();if(this.log("Validating state parameter"),i.state!==t)throw this.log("State mismatch! Expected:",i.state,"Received:",t),new Error("State mismatch - possible CSRF attack");this.log("State validated successfully");const n=this.config.providers.find(e=>e.id===i.providerId);if(!n)throw new Error(`Provider with ID ${i.providerId} not found`);this.log("Found provider configuration:",n.name),this.log("Exchanging code for tokens");const s=await this.exchangeCodeForTokens(e,i.codeVerifier,n.clientId);this.log("Token exchange successful");const o=this.parseIdToken(s.id_token);this.storeTokenData({accessToken:s.access_token,idToken:s.id_token,refreshToken:s.refresh_token,expiresIn:s.expires_in,tokenType:s.token_type,scope:s.scope,idTokenPayload:o,providerId:i.providerId}),this.clearStoredAuthState(),this.log("Cleaning up URL by removing query parameters"),window.history.replaceState({},document.title,window.location.pathname);const a=new CustomEvent("ni:authenticated",{detail:{user:o,providerId:i.providerId}});this.log("Dispatching authenticated event"),document.dispatchEvent(a)}catch(e){console.error("Authentication callback failed:",e),this.log("Authentication callback failed with error:",e.message),this.clearStoredAuthState(),window.history.replaceState({},document.title,window.location.pathname);const t=new CustomEvent("ni:error",{detail:{error:"callback_failed",errorDescription:e.message}});document.dispatchEvent(t)}}async exchangeCodeForTokens(e,t,i){this.log("Exchanging code for tokens with client ID:",i),this.discoveredConfig||await this.fetchOIDCConfig();const n=this.discoveredConfig.token_endpoint,s=new URLSearchParams;s.append("grant_type","authorization_code"),s.append("code",e),s.append("redirect_uri",this.config.redirectUri),s.append("client_id",i),s.append("code_verifier",t),this.log("Token request URL:",n),this.log("Token request parameters (to be sent in POST body):",{grant_type:"authorization_code",code:e.substring(0,10)+"...",redirect_uri:this.config.redirectUri,client_id:i,code_verifier:t.substring(0,10)+"..."});const o=await fetch(n,{method:"POST",headers:{"Content-Type":"application/x-www-form-urlencoded"},body:s});if(!o.ok){const e=await o.json();throw this.log("Token exchange failed. Status:",o.status,"Error:",e),new Error(e.error_description||"Failed to exchange code for tokens")}return this.log("Token exchange response received"),await o.json()}logout(){this.log("Logging out user");const e=this.getStoredTokenData();this.clearStoredTokenData();const t=new CustomEvent("ni:logout",{detail:e?{providerId:e.providerId}:{}});if(this.log("Dispatching logout event"),document.dispatchEvent(t),this.discoveredConfig&&this.discoveredConfig.end_session_endpoint&&e)try{this.log("End session endpoint found, redirecting for logout");const t=new URL(this.discoveredConfig.end_session_endpoint);e.idToken&&t.searchParams.append("id_token_hint",e.idToken),this.config.postLogoutRedirectUri&&t.searchParams.append("post_logout_redirect_uri",this.config.postLogoutRedirectUri),this.log("Redirecting to end session endpoint:",t.toString()),window.location.href=t.toString()}catch(e){console.error("Logout redirect failed:",e),this.log("Logout redirect failed:",e.message)}}isAuthenticated(){const e=this.getStoredTokenData();return this.log("Checking if user is authenticated:",!!e),!!e}getCurrentUser(){const e=this.getStoredTokenData();return e?(this.log("Getting current user from stored token data"),e.idTokenPayload):(this.log("No token data found, user is not authenticated"),null)}applyCustomizations(){if(this.log("Applying customizations to widget"),!this.config.customization)return;const e=document.documentElement,t=this.config.customization;e.style.setProperty("--ni-button-radius",t.buttonRadius),e.style.setProperty("--ni-button-color",t.buttonColor),e.style.setProperty("--ni-button-text-color",t.buttonTextColor),e.style.setProperty("--ni-font-family",t.fontFamily),e.style.setProperty("--ni-widget-width",t.widgetWidth),this.log("Customizations applied successfully")}}document.addEventListener("DOMContentLoaded",()=>{window.NIWidgetConfig?window.niWidget=new NIWidget(window.NIWidgetConfig):console.error("Next Identity Widget configuration not found")}); 