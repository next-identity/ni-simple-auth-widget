class NIWidget{constructor(e){this.config=e,this.state={},this.initializeState(),this.setupEventListeners()}initializeState(){const e=new URLSearchParams(window.location.search),t=e.get("code"),s=e.get("state");t&&s?this.handleCallback(t,s):this.clearStoredTokenData()}setupEventListeners(){document.addEventListener("DOMContentLoaded",()=>{document.querySelectorAll(".ni-auth-button").forEach(e=>{e.addEventListener("click",t=>{t.preventDefault();const s=e.getAttribute("data-provider-id");this.initiateLogin(s)})}),this.applyCustomizations()})}generateRandomString(e=64){const t="ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789-._~";let s="";const n=new Uint8Array(e);return crypto.getRandomValues(n),Array.from(n).forEach(e=>{s+=t[e%t.length]}),s}async calculateCodeChallenge(e){const t=new TextEncoder,s=t.encode(e),n=await crypto.subtle.digest("SHA-256",s);return btoa(String.fromCharCode(...new Uint8Array(n))).replace(/\+/g,"-").replace(/\//g,"_").replace(/=+$/,"")}storeAuthState(e,t,s){const n={state:e,codeVerifier:t,providerId:s,timestamp:Date.now()};localStorage.setItem("ni_auth_state",JSON.stringify(n))}getStoredAuthState(){const e=localStorage.getItem("ni_auth_state");if(!e)return null;try{return JSON.parse(e)}catch(e){return console.error("Failed to parse auth state:",e),null}}clearStoredAuthState(){localStorage.removeItem("ni_auth_state")}storeTokenData(e){localStorage.setItem("ni_token_data",JSON.stringify(e));const t=new CustomEvent("ni:tokens_received",{detail:e});document.dispatchEvent(t)}getStoredTokenData(){const e=localStorage.getItem("ni_token_data");if(!e)return null;try{return JSON.parse(e)}catch(e){return console.error("Failed to parse token data:",e),null}}clearStoredTokenData(){localStorage.removeItem("ni_token_data")}parseIdToken(e){try{const t=e.split(".");if(3!==t.length)throw new Error("Invalid token format");return JSON.parse(atob(t[1]))}catch(e){return console.error("Failed to parse ID token:",e),null}}async initiateLogin(e){try{const t=this.config.providers.find(t=>t.id===e);if(!t)throw new Error(`Provider with ID ${e} not found`);const s=this.generateRandomString(32),n=this.generateRandomString(64),o=await this.calculateCodeChallenge(n);this.storeAuthState(s,n,e);const a=new URL(`${this.config.issuerUrl}/authorize`);a.searchParams.append("client_id",t.clientId),a.searchParams.append("response_type","code"),a.searchParams.append("redirect_uri",this.config.redirectUri),a.searchParams.append("scope",this.config.scope),a.searchParams.append("state",s),a.searchParams.append("code_challenge",o),a.searchParams.append("code_challenge_method",this.config.pkce.challengeMethod);const i=new CustomEvent("ni:login_initiated",{detail:{providerId:e}});document.dispatchEvent(i),window.location.href=a.toString()}catch(e){console.error("Login initiation failed:",e);const t=new CustomEvent("ni:error",{detail:{error:"login_failed",errorDescription:e.message}});document.dispatchEvent(t)}}async handleCallback(e,t){try{const s=this.getStoredAuthState();if(!s)throw new Error("No stored authentication state found");if(s.state!==t)throw new Error("State mismatch - possible CSRF attack");const n=this.config.providers.find(e=>e.id===s.providerId);if(!n)throw new Error(`Provider with ID ${s.providerId} not found`);const o=await this.exchangeCodeForTokens(e,s.codeVerifier,n.clientId),a=this.parseIdToken(o.id_token);this.storeTokenData({accessToken:o.access_token,idToken:o.id_token,refreshToken:o.refresh_token,expiresIn:o.expires_in,tokenType:o.token_type,scope:o.scope,idTokenPayload:a,providerId:s.providerId}),this.clearStoredAuthState(),window.history.replaceState({},document.title,window.location.pathname);const i=new CustomEvent("ni:authenticated",{detail:{user:a,providerId:s.providerId}});document.dispatchEvent(i)}catch(e){console.error("Authentication callback failed:",e),this.clearStoredAuthState(),window.history.replaceState({},document.title,window.location.pathname);const t=new CustomEvent("ni:error",{detail:{error:"callback_failed",errorDescription:e.message}});document.dispatchEvent(t)}}async exchangeCodeForTokens(e,t,s){const n=`${this.config.issuerUrl}/token`,o=new URLSearchParams;o.append("grant_type","authorization_code"),o.append("code",e),o.append("redirect_uri",this.config.redirectUri),o.append("client_id",s),o.append("code_verifier",t);const a=await fetch(n,{method:"POST",headers:{"Content-Type":"application/x-www-form-urlencoded"},body:o});if(!a.ok){const e=await a.json();throw new Error(e.error_description||"Failed to exchange code for tokens")}return await a.json()}logout(){const e=this.getStoredTokenData();this.clearStoredTokenData();const t=new CustomEvent("ni:logout",{detail:e?{providerId:e.providerId}:{}});document.dispatchEvent(t)}isAuthenticated(){return!!this.getStoredTokenData()}getCurrentUser(){const e=this.getStoredTokenData();return e?e.idTokenPayload:null}applyCustomizations(){const e=this.config.customization,t=document.documentElement;t.style.setProperty("--ni-button-radius",e.buttonRadius),t.style.setProperty("--ni-button-color",e.buttonColor),t.style.setProperty("--ni-button-text-color",e.buttonTextColor),t.style.setProperty("--ni-font-family",e.fontFamily),t.style.setProperty("--ni-widget-width",e.widgetWidth)}}document.addEventListener("DOMContentLoaded",()=>{window.NIWidgetConfig?window.niWidget=new NIWidget(window.NIWidgetConfig):console.error("Next Identity Widget configuration not found")}); 